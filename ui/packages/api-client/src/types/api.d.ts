/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/dashboard/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get App Settings */
        get: operations["get_app_settings_api_v1_dashboard_settings_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update App Settings
         * @description 部分更新全局配置 (llm / current_workflow)。
         */
        patch: operations["update_app_settings_api_v1_dashboard_settings_patch"];
        trace?: never;
    };
    "/api/v1/dashboard/assistants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Assistants */
        get: operations["list_assistants_api_v1_dashboard_assistants_get"];
        put?: never;
        /** Create Assistant */
        post: operations["create_assistant_api_v1_dashboard_assistants_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/assistants/{assistant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Assistant */
        delete: operations["delete_assistant_api_v1_dashboard_assistants__assistant_id__delete"];
        options?: never;
        head?: never;
        /** Update Assistant */
        patch: operations["update_assistant_api_v1_dashboard_assistants__assistant_id__patch"];
        trace?: never;
    };
    "/api/v1/dashboard/assistants/assistants:bulk_replace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Bulk Replace Assistants
         * @description 完整替换 assistants 列表。
         *     提示：这是 destructive 操作；可考虑加鉴权 / 二次确认。
         */
        put: operations["bulk_replace_assistants_api_v1_dashboard_assistants_assistants_bulk_replace_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/assistants/{assistant_id}/plugins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Plugin To Assistant */
        post: operations["add_plugin_to_assistant_api_v1_dashboard_assistants__assistant_id__plugins_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/assistants/{assistant_id}/plugins/{plugin_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Plugin From Assistant */
        delete: operations["remove_plugin_from_assistant_api_v1_dashboard_assistants__assistant_id__plugins__plugin_id__delete"];
        options?: never;
        head?: never;
        /** Update Plugin On Assistant */
        patch: operations["update_plugin_on_assistant_api_v1_dashboard_assistants__assistant_id__plugins__plugin_id__patch"];
        trace?: never;
    };
    "/api/v1/dashboard/plugins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Available Plugins */
        get: operations["list_available_plugins_api_v1_dashboard_plugins_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/plugins/{plugin_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Plugin Global */
        delete: operations["remove_plugin_global_api_v1_dashboard_plugins__plugin_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logs */
        get: operations["logs_api_v1_dashboard_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/logs/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Log Stats */
        get: operations["log_stats_api_v1_dashboard_logs_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Workflows */
        get: operations["list_workflows_api_v1_dashboard_workflows_get"];
        put?: never;
        /** Create Workflow */
        post: operations["create_workflow_api_v1_dashboard_workflows_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/workflows/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Active Workflow */
        get: operations["get_active_workflow_api_v1_dashboard_workflows_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Workflow */
        get: operations["get_workflow_api_v1_dashboard_workflows__workflow_id__get"];
        /** Replace Workflow */
        put: operations["replace_workflow_api_v1_dashboard_workflows__workflow_id__put"];
        post?: never;
        /** Delete Workflow */
        delete: operations["delete_workflow_api_v1_dashboard_workflows__workflow_id__delete"];
        options?: never;
        head?: never;
        /** Patch Workflow */
        patch: operations["patch_workflow_api_v1_dashboard_workflows__workflow_id__patch"];
        trace?: never;
    };
    "/api/v1/dashboard/workflows/{workflow_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate Workflow */
        post: operations["activate_workflow_api_v1_dashboard_workflows__workflow_id__activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/workflows/{workflow_id}/instantiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Instantiate Workflow
         * @description 根据 workflow 构建（或重用）assistant 实例并设置 destinations。
         *     仅在需要手动触发时使用；否则可在激活时自动调用。
         */
        post: operations["instantiate_workflow_api_v1_dashboard_workflows__workflow_id__instantiate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/market/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Market Metadata
         * @description Get market metadata including version and item counts.
         */
        get: operations["get_market_metadata_api_v1_dashboard_market_metadata_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/market/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Market Items
         * @description Get list of available market items, optionally filtered by category.
         */
        get: operations["get_market_items_api_v1_dashboard_market_items_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/market/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download Market Item
         * @description Download and install a market item.
         */
        post: operations["download_market_item_api_v1_dashboard_market_download_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/market/items/{item_id}/readme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Market Item Readme
         * @description Get the README content for a specific market item.
         */
        get: operations["get_market_item_readme_api_v1_dashboard_market_items__item_id__readme_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Overview
         * @description 聚合后台核心状态用于 Dashboard 展示的总览接口。
         *     返回结构示例：
         *     {
         *       "assistants": {...},
         *       "plugins": {...},
         *       "workflows": {...},
         *       "logs": {...},
         *       "market": {...},
         *       "llm": {...}
         *     }
         */
        get: operations["get_overview_api_v1_dashboard_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/overview/budget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Budget */
        get: operations["get_budget_api_v1_dashboard_overview_budget_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/frontend/resource/{resource_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resource */
        get: operations["get_resource_api_v1_frontend_resource__resource_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login For Access Token */
        post: operations["login_for_access_token_api_v1_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health */
        get: operations["health_api_v1_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/frontend/copilotkit/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Make Handler */
        get: operations["make_handler_api_v1_frontend_copilotkit__path__put"];
        /** Make Handler */
        put: operations["make_handler_api_v1_frontend_copilotkit__path__put"];
        /** Make Handler */
        post: operations["make_handler_api_v1_frontend_copilotkit__path__put"];
        /** Make Handler */
        delete: operations["make_handler_api_v1_frontend_copilotkit__path__put"];
        /** Make Handler */
        options: operations["make_handler_api_v1_frontend_copilotkit__path__put"];
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AddPluginRequest */
        AddPluginRequest: {
            /** Plugin Id */
            plugin_id: string;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /**
             * Tools Default Enabled
             * @default true
             */
            tools_default_enabled: boolean;
        };
        /** AppAdminDetail */
        AppAdminDetail: {
            /** Current Workflow */
            current_workflow?: string | null;
            /** Workflows */
            workflows?: {
                [key: string]: string;
            }[];
            /** Llm */
            llm: {
                [key: string]: unknown;
            };
        };
        /** AssistantAdminDetail */
        AssistantAdminDetail: {
            /** Id */
            id: string;
            /**
             * Name
             * @description The display name of the assistant.
             */
            name: string;
            /** Description */
            description: string;
            /**
             * Version
             * @description Assistant version.
             * @default 0.2.0
             */
            version: string | number;
            /**
             * Spec Version
             * @description Specification version.
             * @default 2.0
             */
            spec_version: string | number;
            /**
             * Enabled
             * @description Enable or disable the assistant.
             * @default true
             */
            enabled: boolean;
            /**
             * Status
             * @description 运行状态 (active/inactive/error)
             */
            status: string;
            /** Plugins */
            plugins: components["schemas"]["PluginAdminDetail"][];
        };
        /** AssistantCreate */
        AssistantCreate: {
            /**
             * Id
             * @description The unique and permanent ID for the assistant.
             */
            id: string;
            /**
             * Name
             * @description The display name of the assistant.
             */
            name: string;
            /** Description */
            description: string;
            /**
             * Version
             * @description Assistant version.
             * @default 0.2.0
             */
            version: string | number;
            /**
             * Spec Version
             * @description Specification version.
             * @default 2.0
             */
            spec_version: string | number;
            /**
             * Enabled
             * @description Enable or disable the assistant.
             * @default true
             */
            enabled: boolean;
        };
        /** AssistantCreateRequest */
        AssistantCreateRequest: {
            /**
             * Id
             * @description The unique and permanent ID for the assistant.
             */
            id: string;
            /**
             * Name
             * @description The display name of the assistant.
             */
            name: string;
            /** Description */
            description: string;
            /**
             * Version
             * @description Assistant version.
             * @default 0.2.0
             */
            version: string | number;
            /**
             * Spec Version
             * @description Specification version.
             * @default 2.0
             */
            spec_version: string | number;
            /**
             * Enabled
             * @description Enable or disable the assistant.
             * @default true
             */
            enabled: boolean;
        };
        /** AssistantUpdate */
        AssistantUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Plugins */
            plugins?: components["schemas"]["PluginUserConfig"][] | null;
            /** Version */
            version?: string | number | null;
            /** Spec Version */
            spec_version?: string | number | null;
            /** Enabled */
            enabled?: boolean | null;
        };
        /** AssistantUpdateRequest */
        AssistantUpdateRequest: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Plugins */
            plugins?: components["schemas"]["PluginUserConfig"][] | null;
            /** Version */
            version?: string | number | null;
            /** Spec Version */
            spec_version?: string | number | null;
            /** Enabled */
            enabled?: boolean | null;
        };
        /** AssistantsBulkReplaceRequest */
        AssistantsBulkReplaceRequest: {
            /** Assistants */
            assistants: (components["schemas"]["AssistantCreate"] | components["schemas"]["AssistantUpdate"] | {
                [key: string]: unknown;
            })[];
        };
        /** Body_login_for_access_token_api_v1_auth_token_post */
        Body_login_for_access_token_api_v1_auth_token_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /**
         * ConfigItemDetail
         * @description Represents a single configuration item with its schema and value.
         */
        ConfigItemDetail: {
            /**
             * Name
             * @description 配置项的名称 (环境变量名)
             */
            name: string;
            /**
             * Type
             * @description 配置项的期望类型 (e.g., 'string', 'number')
             * @enum {string}
             */
            type: "string" | "float" | "integer" | "bool";
            /**
             * Required
             * @description 是否为必需项
             */
            required: boolean;
            /**
             * Secret
             * @description 是否为敏感信息 (如 API Key)
             * @default false
             */
            secret: boolean;
            /**
             * Description
             * @description 该配置项的描述
             */
            description?: string | null;
            /**
             * Default
             * @description 默认值 (如果存在)
             */
            default?: unknown | null;
            /**
             * Value
             * @description 用户设置的当前值
             */
            value?: unknown | null;
        };
        /** ExecutionModel */
        ExecutionModel: {
            /**
             * Mode
             * @description 运行模式: 'local' 或 'remote'
             * @enum {string}
             */
            mode: "local" | "remote";
            /** Url */
            url?: string | null;
            /**
             * Script Path
             * @description 插件管理器需要运行的Python入口文件路径
             */
            script_path?: string | null;
            /** Mcp Json Path */
            mcp_json_path?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LoginResponse */
        LoginResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            user: components["schemas"]["UserPublic"];
        };
        /** MarketDownloadRequest */
        MarketDownloadRequest: {
            /** Item Id */
            item_id: string;
            /** Category */
            category: string;
        };
        /** MarketDownloadResponse */
        MarketDownloadResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Installed Path */
            installed_path?: string | null;
        };
        /** PluginAdminDetail */
        PluginAdminDetail: {
            /** Plugin Id */
            plugin_id: string;
            /**
             * Tools Default Enabled
             * @default true
             */
            tools_default_enabled: boolean;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /**
             * Tools
             * @description 该插件的工具列表
             */
            tools?: components["schemas"]["ToolAdminDetail"][];
            /** Config */
            config?: components["schemas"]["ConfigItemDetail"][];
            /**
             * Name
             * @description 插件名称
             */
            name: string;
            /**
             * Status
             * @description 运行状态 (active/inactive/error)
             */
            status: string;
        };
        /** PluginConfigSchema */
        PluginConfigSchema: {
            /**
             * Name
             * @description 配置项的名称 (环境变量名)
             */
            name: string;
            /**
             * Type
             * @description 配置项的期望类型 (e.g., 'string', 'number')
             * @enum {string}
             */
            type: "string" | "float" | "integer" | "bool";
            /**
             * Required
             * @description 是否为必需项
             */
            required: boolean;
            /**
             * Secret
             * @description 是否为敏感信息 (如 API Key)
             * @default false
             */
            secret: boolean;
            /**
             * Description
             * @description 该配置项的描述
             */
            description?: string | null;
            /**
             * Default
             * @description 默认值 (如果存在)
             */
            default?: unknown | null;
        };
        /** PluginManifest */
        PluginManifest: {
            /**
             * Id
             * @description 插件唯一标识符
             * @default no_name_plugin
             */
            id: string;
            /**
             * Name
             * @description 插件的显示名称
             */
            name: string;
            /**
             * Description
             * @description 插件描述
             */
            description: string;
            /**
             * Version
             * @description 插件版本
             * @default 0.1.0
             */
            version: string | number;
            /**
             * Spec Version
             * @description 插件规范版本 (遵循语义化版本)
             * @default 2.0
             */
            spec_version: string | number;
            execution: components["schemas"]["ExecutionModel"];
            /** Dependencies */
            dependencies?: string[] | null;
            /** Python Version */
            python_version?: string | null;
            /** Config Schema */
            config_schema?: components["schemas"]["PluginConfigSchema"][] | null;
        };
        /** PluginUserConfig */
        PluginUserConfig: {
            /** Plugin Id */
            plugin_id: string;
            /**
             * Tools Default Enabled
             * @default true
             */
            tools_default_enabled: boolean;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /** Tools */
            tools?: components["schemas"]["ToolOverrideConfig"][] | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
        };
        /** ToolAdminDetail */
        ToolAdminDetail: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Enabled */
            enabled: boolean;
        };
        /** ToolOverrideConfig */
        ToolOverrideConfig: {
            /** Name */
            name: string;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /** Description */
            description?: string | null;
        };
        /** UpdatePluginConfigRequest */
        UpdatePluginConfigRequest: {
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
            /** Enabled */
            enabled?: boolean | null;
            /** Tools Default Enabled */
            tools_default_enabled?: boolean | null;
            /** Tools */
            tools?: string[] | null;
        };
        /** UserPublic */
        UserPublic: {
            /** Id */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Full Name */
            full_name?: string | null;
            /** Role */
            role: string[];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Workflow */
        "Workflow-Input": {
            /**
             * Id
             * @description The unique and permanent ID for the workflow
             */
            id: string;
            /**
             * Name
             * @description The display name for the workflow
             */
            name: string;
            /**
             * Description
             * @description A description of what the workflow does
             */
            description?: string | null;
            /**
             * Nodes
             * @description Workflow nodes
             */
            nodes?: components["schemas"]["WorkflowNode"][];
            /**
             * Edges
             * @description Workflow edges
             */
            edges?: components["schemas"]["WorkflowEdge"][];
            /**
             * Created At
             * @description Creation timestamp
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Last update timestamp
             */
            updated_at?: string | null;
        };
        /** Workflow */
        "Workflow-Output": {
            /**
             * Id
             * @description The unique and permanent ID for the workflow
             */
            id: string;
            /**
             * Name
             * @description The display name for the workflow
             */
            name: string;
            /**
             * Description
             * @description A description of what the workflow does
             */
            description?: string | null;
            /**
             * Nodes
             * @description Workflow nodes
             */
            nodes?: components["schemas"]["WorkflowNode"][];
            /**
             * Edges
             * @description Workflow edges
             */
            edges?: components["schemas"]["WorkflowEdge"][];
            /**
             * Created At
             * @description Creation timestamp
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Last update timestamp
             */
            updated_at?: string | null;
        };
        /** WorkflowCreate */
        WorkflowCreate: {
            /**
             * Id
             * @description The unique and permanent ID for the workflow
             */
            id: string;
            /**
             * Name
             * @description The display name for the workflow
             */
            name: string;
            /**
             * Description
             * @description A description of what the workflow does
             */
            description?: string | null;
        };
        /** WorkflowEdge */
        WorkflowEdge: {
            /**
             * Id
             * @description Unique edge identifier
             */
            id: string;
            /**
             * Source
             * @description Source node ID
             */
            source: string;
            /**
             * Target
             * @description Target node ID
             */
            target: string;
            /**
             * Sourcehandle
             * @description Source handle ID
             */
            sourceHandle?: string | null;
            /**
             * Targethandle
             * @description Target handle ID
             */
            targetHandle?: string | null;
            /**
             * Type
             * @description Edge type
             * @default default
             */
            type: string | null;
            /** @description Edge data */
            data?: components["schemas"]["WorkflowEdgeData"] | null;
        };
        /** WorkflowEdgeData */
        WorkflowEdgeData: {
            /**
             * Mode
             * @description Edge mode
             * @default single
             * @enum {string}
             */
            mode: "single" | "bidirectional";
        };
        /** WorkflowNode */
        WorkflowNode: {
            /**
             * Id
             * @description Unique node identifier
             */
            id: string;
            /**
             * Type
             * @description Node type
             * @default assistant
             * @constant
             */
            type: "assistant";
            /**
             * Position
             * @description Node position {x, y}
             */
            position: {
                [key: string]: number;
            };
            /** @description Node data */
            data: components["schemas"]["WorkflowNodeData"];
        };
        /** WorkflowNodeData */
        WorkflowNodeData: {
            /**
             * Assistantid
             * @description Assistant ID referenced by this node
             */
            assistantId: string;
            /**
             * Assistantname
             * @description Assistant name for display
             */
            assistantName: string;
            /**
             * Description
             * @description Node description
             */
            description?: string | null;
            /**
             * Isstart
             * @description Is this the start node
             * @default false
             */
            isStart: boolean;
        };
        /** WorkflowUpdate */
        WorkflowUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Nodes */
            nodes?: components["schemas"]["WorkflowNode"][] | null;
            /** Edges */
            edges?: components["schemas"]["WorkflowEdge"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_app_settings_api_v1_dashboard_settings_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppAdminDetail"];
                };
            };
        };
    };
    update_app_settings_api_v1_dashboard_settings_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_assistants_api_v1_dashboard_assistants_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantAdminDetail"][];
                };
            };
        };
    };
    create_assistant_api_v1_dashboard_assistants_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssistantCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantAdminDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_assistant_api_v1_dashboard_assistants__assistant_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_assistant_api_v1_dashboard_assistants__assistant_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssistantUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantAdminDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_replace_assistants_api_v1_dashboard_assistants_assistants_bulk_replace_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssistantsBulkReplaceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_plugin_to_assistant_api_v1_dashboard_assistants__assistant_id__plugins_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPluginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantAdminDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_plugin_from_assistant_api_v1_dashboard_assistants__assistant_id__plugins__plugin_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistant_id: string;
                plugin_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantAdminDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_plugin_on_assistant_api_v1_dashboard_assistants__assistant_id__plugins__plugin_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistant_id: string;
                plugin_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePluginConfigRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantAdminDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_available_plugins_api_v1_dashboard_plugins_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginManifest"][];
                };
            };
        };
    };
    remove_plugin_global_api_v1_dashboard_plugins__plugin_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plugin_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logs_api_v1_dashboard_logs_get: {
        parameters: {
            query?: {
                level?: string | null;
                module?: string | null;
                limit?: number | null;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    log_stats_api_v1_dashboard_logs_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_workflows_api_v1_dashboard_workflows_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow-Output"][];
                };
            };
        };
    };
    create_workflow_api_v1_dashboard_workflows_post: {
        parameters: {
            query?: {
                make_active?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_workflow_api_v1_dashboard_workflows_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_workflow_api_v1_dashboard_workflows__workflow_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replace_workflow_api_v1_dashboard_workflows__workflow_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workflow-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workflow_api_v1_dashboard_workflows__workflow_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_workflow_api_v1_dashboard_workflows__workflow_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_workflow_api_v1_dashboard_workflows__workflow_id__activate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    instantiate_workflow_api_v1_dashboard_workflows__workflow_id__instantiate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_market_metadata_api_v1_dashboard_market_metadata_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_market_items_api_v1_dashboard_market_items_get: {
        parameters: {
            query: {
                category: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_market_item_api_v1_dashboard_market_download_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MarketDownloadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MarketDownloadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_market_item_readme_api_v1_dashboard_market_items__item_id__readme_get: {
        parameters: {
            query: {
                category: string;
            };
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_overview_api_v1_dashboard_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_budget_api_v1_dashboard_overview_budget_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_resource_api_v1_frontend_resource__resource_id__get: {
        parameters: {
            query?: {
                with_model_text?: boolean;
            };
            header?: never;
            path: {
                resource_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_for_access_token_api_v1_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_for_access_token_api_v1_auth_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_api_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    make_handler_api_v1_frontend_copilotkit__path__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    make_handler_api_v1_frontend_copilotkit__path__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    make_handler_api_v1_frontend_copilotkit__path__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    make_handler_api_v1_frontend_copilotkit__path__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    make_handler_api_v1_frontend_copilotkit__path__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
