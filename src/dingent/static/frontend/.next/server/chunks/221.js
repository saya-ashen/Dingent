"use strict";exports.id=221,exports.ids=[221],exports.modules={50221:(a,b,c)=>{c.d(b,{fromSSO:()=>i});var d=c(71930),e=c(92413),f=c(21905),g=c(83691);let h=async({ssoStartUrl:a,ssoSession:b,ssoAccountId:h,ssoRegion:i,ssoRoleName:j,ssoClient:k,clientConfig:l,parentClientConfig:m,profile:n,logger:o})=>{let p,q,r="To refresh this SSO session run aws sso login with the corresponding profile.";if(b)try{let a=await (0,g.Y)({profile:n})();p={accessToken:a.token,expiresAt:new Date(a.expiration).toISOString()}}catch(a){throw new d.C1(a.message,{tryNextLink:!1,logger:o})}else try{p=await (0,e.vf)(a)}catch(a){throw new d.C1(`The SSO session associated with this profile is invalid. ${r}`,{tryNextLink:!1,logger:o})}if(new Date(p.expiresAt).getTime()-Date.now()<=0)throw new d.C1(`The SSO session associated with this profile has expired. ${r}`,{tryNextLink:!1,logger:o});let{accessToken:s}=p,{SSOClient:t,GetRoleCredentialsCommand:u}=await c.e(455).then(c.bind(c,39455)),v=k||new t(Object.assign({},l??{},{logger:l?.logger??m?.logger,region:l?.region??i}));try{q=await v.send(new u({accountId:h,roleName:j,accessToken:s}))}catch(a){throw new d.C1(a,{tryNextLink:!1,logger:o})}let{roleCredentials:{accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:z,credentialScope:A,accountId:B}={}}=q;if(!w||!x||!y||!z)throw new d.C1("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:o});let C={accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:new Date(z),...A&&{credentialScope:A},...B&&{accountId:B}};return b?(0,f.g)(C,"CREDENTIALS_SSO","s"):(0,f.g)(C,"CREDENTIALS_SSO_LEGACY","u"),C},i=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:c,ssoAccountId:f,ssoRegion:g,ssoRoleName:i,ssoSession:j}=a,{ssoClient:k}=a,l=(0,e.Bz)({profile:a.profile??b?.profile});if(c||f||g||i||j)if(c&&f&&g&&i)return h({ssoStartUrl:c,ssoSession:j,ssoAccountId:f,ssoRegion:g,ssoRoleName:i,ssoClient:k,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:l});else throw new d.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:a.logger});{let b=(await (0,e.YU)(a))[l];if(!b)throw new d.C1(`Profile ${l} was not found.`,{logger:a.logger});if(!(a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name))(b))throw new d.C1(`Profile ${l} is not configured with SSO credentials.`,{logger:a.logger});if(b?.sso_session){let f=(await (0,e.qw)(a))[b.sso_session],h=` configurations in profile ${l} and sso-session ${b.sso_session}`;if(g&&g!==f.sso_region)throw new d.C1("Conflicting SSO region"+h,{tryNextLink:!1,logger:a.logger});if(c&&c!==f.sso_start_url)throw new d.C1("Conflicting SSO start_url"+h,{tryNextLink:!1,logger:a.logger});b.sso_region=f.sso_region,b.sso_start_url=f.sso_start_url}let{sso_start_url:f,sso_account_id:i,sso_region:j,sso_role_name:m,sso_session:n}=((a,b)=>{let{sso_start_url:c,sso_account_id:e,sso_region:f,sso_role_name:g}=a;if(!c||!e||!f||!g)throw new d.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(a).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:b});return a})(b,a.logger);return h({ssoStartUrl:f,ssoSession:n,ssoAccountId:i,ssoRegion:j,ssoRoleName:m,ssoClient:k,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:l})}}}};